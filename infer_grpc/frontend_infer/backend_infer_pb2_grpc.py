# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import backend_infer_pb2 as backend__infer__pb2


class backend_inferStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.commitJob = channel.unary_unary(
                '/backend_infer/commitJob',
                request_serializer=backend__infer__pb2.JobRequest.SerializeToString,
                response_deserializer=backend__infer__pb2.JobReply.FromString,
                )


class backend_inferServicer(object):
    """Missing associated documentation comment in .proto file"""

    def commitJob(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_backend_inferServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'commitJob': grpc.unary_unary_rpc_method_handler(
                    servicer.commitJob,
                    request_deserializer=backend__infer__pb2.JobRequest.FromString,
                    response_serializer=backend__infer__pb2.JobReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'backend_infer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class backend_infer(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def commitJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/backend_infer/commitJob',
            backend__infer__pb2.JobRequest.SerializeToString,
            backend__infer__pb2.JobReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
